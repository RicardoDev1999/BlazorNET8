@page "/"
@rendermode RenderMode.InteractiveServer

@using BlazorApp.Stores
@using System.ComponentModel

@inject PokemonListStore pokemonStore;

<PageTitle>Home</PageTitle>

<h1>PokeList: </h1>

<br />

@if (!pokemonStore.Loading)
{
    <div class="grid grid-cols-4 gap-8">
        @foreach (var item in pokemonStore.PokemonList.Results)
        {
            <BlazorApp.Components.Pokemon.PokemonListItem 
                SetFavoriteOnClick="SetFavoriteOnClick"
                Item="item"
                IsLoading="pokemonStore.SpecificLoading.Any(x => x == item.Id)"
                />
        }
    </div>

    <section class="flex flex-row mt-8 gap-2 align-middle text-center justify-end items-center">
        <input type="button"
               class="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
               @onclick="PreviousPageOnClick"
               value="Previous Page" />
        <input type="text"
               class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-16 p-2.5"
               @bind-value="pokemonStore.Page"
               min="1" max="@pokemonStore.MaxPage" />
        <input type="button"
               class="cursor-pointer bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
               @onclick="NextPageOnClick"
               value="Next Page" />
        <span>... @pokemonStore.MaxPage</span>
    </section>
}
else
{
    <h1>Loading...</h1>
}

@code {
    void PreviousPageOnClick()
    {
        if (pokemonStore.Page > 1)
        {
            pokemonStore.Page--;
        }
    }

    void NextPageOnClick()
    {
        if (pokemonStore.Page < pokemonStore.MaxPage)
        {
            pokemonStore.Page++;
        }
    }

    protected void OnPokemonStorePropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        this.StateHasChanged();
    }

    void SetFavoriteOnClick(int pokemonId, bool isFavorite)
    {
        this.InvokeAsync(async () => await pokemonStore.SetFavorite(pokemonId, isFavorite));
    }

    protected override void OnInitialized()
    {
        pokemonStore.PropertyChanged -= OnPokemonStorePropertyChanged;
        pokemonStore.PropertyChanged += OnPokemonStorePropertyChanged;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await pokemonStore.GetAsync(pokemonStore.Page);
    }
}